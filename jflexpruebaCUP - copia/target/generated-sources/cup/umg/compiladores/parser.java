
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package umg.compiladores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\004\003\000\002\004" +
    "\002\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\005\000\002\006\007\000\002\006" +
    "\006\000\002\006\010\000\002\040\003\000\002\040\005" +
    "\000\002\037\007\000\002\037\011\000\002\037\012\000" +
    "\002\037\010\000\002\037\007\000\002\037\007\000\002" +
    "\041\005\000\002\041\007\000\002\010\004\000\002\010" +
    "\005\000\002\013\013\000\002\013\014\000\002\014\011" +
    "\000\002\014\015\000\002\014\012\000\002\014\016\000" +
    "\002\014\021\000\002\014\022\000\002\016\011\000\002" +
    "\016\012\000\002\017\011\000\002\017\012\000\002\020" +
    "\003\000\002\020\004\000\002\033\010\000\002\033\005" +
    "\000\002\021\015\000\002\021\016\000\002\015\013\000" +
    "\002\015\014\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\042\004\000\002\042\006" +
    "\000\002\042\005\000\002\042\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\046\002\uffff\012\011\024\024\025\041\026" +
    "\006\027\004\030\032\031\023\032\022\033\016\035\015" +
    "\041\037\042\010\043\020\054\026\061\017\073\031\100" +
    "\030\001\002\000\012\012\uffcd\061\uffcd\073\uffcd\100\uffcd" +
    "\001\002\000\012\012\011\061\017\073\031\100\030\001" +
    "\002\000\012\012\uffd0\061\uffd0\073\uffd0\100\uffd0\001\002" +
    "\000\004\002\230\001\002\000\004\012\221\001\002\000" +
    "\012\012\011\061\017\073\031\100\030\001\002\000\054" +
    "\011\207\012\011\014\054\015\064\016\057\017\055\020" +
    "\050\021\066\061\017\064\053\065\062\066\061\067\051" +
    "\070\205\071\065\072\047\073\031\075\206\076\052\077" +
    "\060\100\030\001\002\000\020\002\ufff7\005\ufff7\011\ufff7" +
    "\013\ufff7\036\ufff7\037\ufff7\040\ufff7\001\002\000\020\002" +
    "\ufffa\005\ufffa\011\ufffa\013\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\001\002\000\004\012\162\001\002\000\004\012\136\001" +
    "\002\000\114\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\035\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\054\uffb4\061\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4" +
    "\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\001" +
    "\002\000\004\004\125\001\002\000\004\002\000\001\002" +
    "\000\012\012\uffca\061\uffca\073\uffca\100\uffca\001\002\000" +
    "\012\012\uffcb\061\uffcb\073\uffcb\100\uffcb\001\002\000\012" +
    "\012\uffce\061\uffce\073\uffce\100\uffce\001\002\000\020\002" +
    "\ufff9\005\ufff9\011\ufff9\013\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\001\002\000\004\010\114\001\002\000\020\002\ufff5\005" +
    "\ufff5\011\ufff5\013\ufff5\036\ufff5\037\ufff5\040\ufff5\001\002" +
    "\000\114\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\021\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\035\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\054\uffb3\061\uffb3\063\uffb3\064\uffb3" +
    "\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073" +
    "\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\001\002" +
    "\000\114\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\024\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\035\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\054\uffb5\061\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073" +
    "\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\001\002" +
    "\000\012\012\uffcc\061\uffcc\073\uffcc\100\uffcc\001\002\000" +
    "\020\002\ufffe\005\ufffe\011\ufffe\013\ufffe\036\ufffe\037\ufffe" +
    "\040\ufffe\001\002\000\020\002\ufff6\005\ufff6\011\ufff6\013" +
    "\ufff6\036\ufff6\037\ufff6\040\ufff6\001\002\000\020\002\ufffb" +
    "\005\ufffb\011\ufffb\013\ufffb\036\ufffb\037\ufffb\040\ufffb\001" +
    "\002\000\020\002\ufffd\005\ufffd\011\ufffd\013\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\001\002\000\004\012\043\001\002\000" +
    "\020\002\ufff8\005\ufff8\011\ufff8\013\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\001\002\000\012\012\uffcf\061\uffcf\073\uffcf\100" +
    "\uffcf\001\002\000\020\002\ufffc\005\ufffc\011\ufffc\013\ufffc" +
    "\036\ufffc\037\ufffc\040\ufffc\001\002\000\044\012\011\024" +
    "\024\025\041\026\006\027\004\030\032\031\023\032\022" +
    "\033\016\035\015\041\037\042\010\043\020\054\026\061" +
    "\017\073\031\100\030\001\002\000\004\011\045\001\002" +
    "\000\012\012\011\061\017\073\031\100\030\001\002\000" +
    "\042\011\056\014\054\015\064\016\057\017\055\020\050" +
    "\021\066\064\053\065\062\066\061\067\051\070\063\071" +
    "\065\072\047\076\052\077\060\001\002\000\012\012\011" +
    "\061\017\073\031\100\030\001\002\000\012\012\011\061" +
    "\017\073\031\100\030\001\002\000\012\012\011\061\017" +
    "\073\031\100\030\001\002\000\012\012\011\061\017\073" +
    "\031\100\030\001\002\000\012\012\011\061\017\073\031" +
    "\100\030\001\002\000\012\012\011\061\017\073\031\100" +
    "\030\001\002\000\012\012\011\061\017\073\031\100\030" +
    "\001\002\000\044\012\011\024\024\025\041\026\006\027" +
    "\004\030\032\031\023\032\022\033\016\035\015\041\037" +
    "\042\010\043\020\054\026\061\017\073\031\100\030\001" +
    "\002\000\012\012\011\061\017\073\031\100\030\001\002" +
    "\000\012\012\011\061\017\073\031\100\030\001\002\000" +
    "\012\012\011\061\017\073\031\100\030\001\002\000\012" +
    "\012\011\061\017\073\031\100\030\001\002\000\012\012" +
    "\011\061\017\073\031\100\030\001\002\000\012\012\011" +
    "\061\017\073\031\100\030\001\002\000\012\012\011\061" +
    "\017\073\031\100\030\001\002\000\012\012\011\061\017" +
    "\073\031\100\030\001\002\000\114\011\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\035\uffb7\041\uffb7\042\uffb7\043\uffb7\054\uffb7" +
    "\061\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070" +
    "\063\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7" +
    "\077\uffb7\100\uffb7\001\002\000\114\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\050\021\066" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\035\uffbd\041\uffbd\042\uffbd\043\uffbd\054\uffbd" +
    "\061\uffbd\063\uffbd\064\uffbd\065\062\066\uffbd\067\051\070" +
    "\063\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\052" +
    "\077\060\100\uffbd\001\002\000\114\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\057\017\055\020\050\021\066" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\035\uffc4\041\uffc4\042\uffc4\043\uffc4\054\uffc4" +
    "\061\uffc4\063\uffc4\064\053\065\062\066\061\067\051\070" +
    "\063\071\065\072\047\073\uffc4\074\uffc4\075\uffc4\076\052" +
    "\077\060\100\uffc4\001\002\000\114\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\035\uffbf\041\uffbf\042\uffbf\043\uffbf\054\uffbf" +
    "\061\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070" +
    "\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf" +
    "\077\uffbf\100\uffbf\001\002\000\114\011\uffb9\012\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\050\021\066" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\035\uffb9\041\uffb9\042\uffb9\043\uffb9\054\uffb9" +
    "\061\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070" +
    "\063\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9" +
    "\077\uffb9\100\uffb9\001\002\000\114\011\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\050\021\066" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\035\uffc1\041\uffc1\042\uffc1\043\uffc1\054\uffc1" +
    "\061\uffc1\063\uffc1\064\053\065\062\066\uffc1\067\051\070" +
    "\063\071\065\072\047\073\uffc1\074\uffc1\075\uffc1\076\052" +
    "\077\060\100\uffc1\001\002\000\114\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\050\021\066" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\035\uffbc\041\uffbc\042\uffbc\043\uffbc\054\uffbc" +
    "\061\uffbc\063\uffbc\064\uffbc\065\062\066\uffbc\067\051\070" +
    "\063\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\052" +
    "\077\uffbc\100\uffbc\001\002\000\114\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\017\055\020\050\021\066" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\035\uffc3\041\uffc3\042\uffc3\043\uffc3\054\uffc3" +
    "\061\uffc3\063\uffc3\064\053\065\062\066\061\067\051\070" +
    "\063\071\065\072\047\073\uffc3\074\uffc3\075\uffc3\076\052" +
    "\077\060\100\uffc3\001\002\000\004\013\100\001\002\000" +
    "\004\004\101\001\002\000\044\012\011\024\024\025\041" +
    "\026\006\027\004\030\032\031\023\032\022\033\016\035" +
    "\015\041\037\042\010\043\020\054\026\061\017\073\031" +
    "\100\030\001\002\000\004\005\103\001\002\000\062\002" +
    "\uffd4\005\uffd4\011\uffd4\012\011\013\uffd4\024\024\025\041" +
    "\026\006\027\004\030\032\031\023\032\022\033\016\035" +
    "\015\036\uffd4\037\uffd4\040\uffd4\041\037\042\010\043\020" +
    "\054\026\061\017\073\031\100\030\001\002\000\020\002" +
    "\uffd3\005\uffd3\011\uffd3\013\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\001\002\000\114\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\050\021\066\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\035" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\054\uffc2\061\uffc2\063\uffc2" +
    "\064\053\065\062\066\061\067\051\070\063\071\065\072" +
    "\047\073\uffc2\074\uffc2\075\uffc2\076\052\077\060\100\uffc2" +
    "\001\002\000\114\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\064\016\057\017\055\020\050\021\066\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\035" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\054\uffc5\061\uffc5\063\uffc5" +
    "\064\053\065\062\066\061\067\051\070\063\071\065\072" +
    "\047\073\uffc5\074\uffc5\075\uffc5\076\052\077\060\100\uffc5" +
    "\001\002\000\114\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\017\uffc0\020\050\021\066\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\035" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\054\uffc0\061\uffc0\063\uffc0" +
    "\064\uffc0\065\062\066\uffc0\067\051\070\063\071\065\072" +
    "\047\073\uffc0\074\uffc0\075\uffc0\076\052\077\060\100\uffc0" +
    "\001\002\000\114\011\uffba\012\uffba\013\uffba\014\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\050\021\066\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\035" +
    "\uffba\041\uffba\042\uffba\043\uffba\054\uffba\061\uffba\063\uffba" +
    "\064\uffba\065\062\066\uffba\067\uffba\070\063\071\uffba\072" +
    "\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba" +
    "\001\002\000\114\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\050\021\066\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\035" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\054\uffbb\061\uffbb\063\uffbb" +
    "\064\uffbb\065\062\066\uffbb\067\uffbb\070\063\071\uffbb\072" +
    "\uffbb\073\uffbb\074\uffbb\075\uffbb\076\052\077\uffbb\100\uffbb" +
    "\001\002\000\114\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\066\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\035" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\054\uffb8\061\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\063\071\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8" +
    "\001\002\000\114\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\050\021\066\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\035" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\054\uffbe\061\uffbe\063\uffbe" +
    "\064\uffbe\065\062\066\uffbe\067\051\070\063\071\065\072" +
    "\uffbe\073\uffbe\074\uffbe\075\uffbe\076\052\077\060\100\uffbe" +
    "\001\002\000\004\055\115\001\002\000\004\010\116\001" +
    "\002\000\004\056\117\001\002\000\004\012\120\001\002" +
    "\000\012\012\011\061\017\073\031\100\030\001\002\000" +
    "\042\013\122\014\054\015\064\016\057\017\055\020\050" +
    "\021\066\064\053\065\062\066\061\067\051\070\063\071" +
    "\065\072\047\076\052\077\060\001\002\000\004\011\123" +
    "\001\002\000\062\002\uffe4\005\uffe4\011\uffe4\012\011\013" +
    "\uffe4\024\024\025\041\026\006\027\004\030\032\031\023" +
    "\032\022\033\016\035\015\036\uffe4\037\uffe4\040\uffe4\041" +
    "\037\042\010\043\020\054\026\061\017\073\031\100\030" +
    "\001\002\000\020\002\uffe3\005\uffe3\011\uffe3\013\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\001\002\000\044\012\011\024\024" +
    "\025\041\026\006\027\004\030\032\031\023\032\022\033" +
    "\016\035\015\041\037\042\010\043\020\054\026\061\017" +
    "\073\031\100\030\001\002\000\004\005\127\001\002\000" +
    "\004\042\130\001\002\000\004\012\131\001\002\000\012" +
    "\012\011\061\017\073\031\100\030\001\002\000\042\013" +
    "\133\014\054\015\064\016\057\017\055\020\050\021\066" +
    "\064\053\065\062\066\061\067\051\070\063\071\065\072" +
    "\047\076\052\077\060\001\002\000\004\011\134\001\002" +
    "\000\062\002\uffd2\005\uffd2\011\uffd2\012\011\013\uffd2\024" +
    "\024\025\041\026\006\027\004\030\032\031\023\032\022" +
    "\033\016\035\015\036\uffd2\037\uffd2\040\uffd2\041\037\042" +
    "\010\043\020\054\026\061\017\073\031\100\030\001\002" +
    "\000\020\002\uffd1\005\uffd1\011\uffd1\013\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\001\002\000\012\012\011\061\017\073\031" +
    "\100\030\001\002\000\042\013\140\014\054\015\064\016" +
    "\057\017\055\020\050\021\066\064\053\065\062\066\061" +
    "\067\051\070\063\071\065\072\047\076\052\077\060\001" +
    "\002\000\004\004\141\001\002\000\044\012\011\024\024" +
    "\025\041\026\006\027\004\030\032\031\023\032\022\033" +
    "\016\035\015\041\037\042\010\043\020\054\026\061\017" +
    "\073\031\100\030\001\002\000\004\005\143\001\002\000" +
    "\064\002\uffe2\005\uffe2\011\uffe2\012\011\013\uffe2\024\024" +
    "\025\041\026\006\027\004\030\032\031\023\032\022\033" +
    "\016\034\144\035\015\036\uffe2\037\uffe2\040\uffe2\041\037" +
    "\042\010\043\020\054\026\061\017\073\031\100\030\001" +
    "\002\000\006\004\146\033\147\001\002\000\020\002\uffe0" +
    "\005\uffe0\011\uffe0\013\uffe0\036\uffe0\037\uffe0\040\uffe0\001" +
    "\002\000\044\012\011\024\024\025\041\026\006\027\004" +
    "\030\032\031\023\032\022\033\016\035\015\041\037\042" +
    "\010\043\020\054\026\061\017\073\031\100\030\001\002" +
    "\000\004\012\150\001\002\000\012\012\011\061\017\073" +
    "\031\100\030\001\002\000\042\013\152\014\054\015\064" +
    "\016\057\017\055\020\050\021\066\064\053\065\062\066" +
    "\061\067\051\070\063\071\065\072\047\076\052\077\060" +
    "\001\002\000\004\004\153\001\002\000\044\012\011\024" +
    "\024\025\041\026\006\027\004\030\032\031\023\032\022" +
    "\033\016\035\015\041\037\042\010\043\020\054\026\061" +
    "\017\073\031\100\030\001\002\000\004\005\155\001\002" +
    "\000\062\002\uffde\005\uffde\011\uffde\012\011\013\uffde\024" +
    "\024\025\041\026\006\027\004\030\032\031\023\032\022" +
    "\033\016\035\015\036\uffde\037\uffde\040\uffde\041\037\042" +
    "\010\043\020\054\026\061\017\073\031\100\030\001\002" +
    "\000\020\002\uffdd\005\uffdd\011\uffdd\013\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\001\002\000\004\005\160\001\002\000\062" +
    "\002\uffe1\005\uffe1\011\uffe1\012\011\013\uffe1\024\024\025" +
    "\041\026\006\027\004\030\032\031\023\032\022\033\016" +
    "\035\015\036\uffe1\037\uffe1\040\uffe1\041\037\042\010\043" +
    "\020\054\026\061\017\073\031\100\030\001\002\000\020" +
    "\002\uffdf\005\uffdf\011\uffdf\013\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\001\002\000\012\012\011\061\017\073\031\100\030" +
    "\001\002\000\042\013\164\014\054\015\064\016\057\017" +
    "\055\020\050\021\066\064\053\065\062\066\061\067\051" +
    "\070\063\071\065\072\047\076\052\077\060\001\002\000" +
    "\004\004\165\001\002\000\006\036\171\040\166\001\002" +
    "\000\004\063\202\001\002\000\010\005\uffd8\036\171\040" +
    "\166\001\002\000\004\005\177\001\002\000\012\012\011" +
    "\061\017\073\031\100\030\001\002\000\042\014\054\015" +
    "\064\016\057\017\055\020\050\021\066\063\173\064\053" +
    "\065\062\066\061\067\051\070\063\071\065\072\047\076" +
    "\052\077\060\001\002\000\044\012\011\024\024\025\041" +
    "\026\006\027\004\030\032\031\023\032\022\033\016\035" +
    "\015\041\037\042\010\043\020\054\026\061\017\073\031" +
    "\100\030\001\002\000\004\037\175\001\002\000\004\011" +
    "\176\001\002\000\010\005\uffd6\036\uffd6\040\uffd6\001\002" +
    "\000\062\002\uffda\005\uffda\011\uffda\012\011\013\uffda\024" +
    "\024\025\041\026\006\027\004\030\032\031\023\032\022" +
    "\033\016\035\015\036\uffda\037\uffda\040\uffda\041\037\042" +
    "\010\043\020\054\026\061\017\073\031\100\030\001\002" +
    "\000\020\002\uffd9\005\uffd9\011\uffd9\013\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\001\002\000\004\005\uffd7\001\002\000\044" +
    "\012\011\024\024\025\041\026\006\027\004\030\032\031" +
    "\023\032\022\033\016\035\015\041\037\042\010\043\020" +
    "\054\026\061\017\073\031\100\030\001\002\000\010\005" +
    "\uffd5\036\uffd5\040\uffd5\001\002\000\042\011\216\014\054" +
    "\015\064\016\057\017\055\020\050\021\066\064\053\065" +
    "\062\066\061\067\051\070\063\071\065\072\047\076\052" +
    "\077\060\001\002\000\012\012\011\061\017\073\031\100" +
    "\030\001\002\000\062\002\uffc9\005\uffc9\011\211\012\011" +
    "\013\uffc9\024\024\025\041\026\006\027\004\030\032\031" +
    "\023\032\022\033\016\035\015\036\uffc9\037\uffc9\040\uffc9" +
    "\041\037\042\010\043\020\054\026\061\017\073\031\100" +
    "\030\001\002\000\020\002\uffe6\005\uffe6\011\uffe6\013\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\001\002\000\020\002\uffc6\005" +
    "\uffc6\011\uffc6\013\uffc6\036\uffc6\037\uffc6\040\uffc6\001\002" +
    "\000\062\002\uffc7\005\uffc7\011\uffc7\012\011\013\uffc7\024" +
    "\024\025\041\026\006\027\004\030\032\031\023\032\022" +
    "\033\016\035\015\036\uffc7\037\uffc7\040\uffc7\041\037\042" +
    "\010\043\020\054\026\061\017\073\031\100\030\001\002" +
    "\000\020\002\uffc8\005\uffc8\011\uffc8\013\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\001\002\000\054\011\214\012\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\061\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf" +
    "\073\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\001\002\000" +
    "\044\012\011\024\024\025\041\026\006\027\004\030\032" +
    "\031\023\032\022\033\016\035\015\041\037\042\010\043" +
    "\020\054\026\061\017\073\031\100\030\001\002\000\020" +
    "\002\uffe9\005\uffe9\011\uffe9\013\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\001\002\000\020\002\uffe5\005\uffe5\011\uffe5\013\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\001\002\000\042\013\220\014" +
    "\054\015\064\016\057\017\055\020\050\021\066\064\053" +
    "\065\062\066\061\067\051\070\063\071\065\072\047\076" +
    "\052\077\060\001\002\000\114\011\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\035\uffb6\041\uffb6\042\uffb6\043\uffb6\054\uffb6\061" +
    "\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070\uffb6" +
    "\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077" +
    "\uffb6\100\uffb6\001\002\000\012\012\011\061\017\073\031" +
    "\100\030\001\002\000\042\013\223\014\054\015\064\016" +
    "\057\017\055\020\050\021\066\064\053\065\062\066\061" +
    "\067\051\070\063\071\065\072\047\076\052\077\060\001" +
    "\002\000\004\004\224\001\002\000\044\012\011\024\024" +
    "\025\041\026\006\027\004\030\032\031\023\032\022\033" +
    "\016\035\015\041\037\042\010\043\020\054\026\061\017" +
    "\073\031\100\030\001\002\000\004\005\226\001\002\000" +
    "\062\002\uffdc\005\uffdc\011\uffdc\012\011\013\uffdc\024\024" +
    "\025\041\026\006\027\004\030\032\031\023\032\022\033" +
    "\016\035\015\036\uffdc\037\uffdc\040\uffdc\041\037\042\010" +
    "\043\020\054\026\061\017\073\031\100\030\001\002\000" +
    "\020\002\uffdb\005\uffdb\011\uffdb\013\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\001\002\000\004\002\001\001\002\000\044\011" +
    "\233\014\054\015\064\016\057\017\055\020\050\021\066" +
    "\064\053\065\062\066\061\067\051\070\234\071\065\072" +
    "\047\074\232\076\052\077\060\001\002\000\012\012\011" +
    "\061\017\073\031\100\030\001\002\000\062\002\ufff4\005" +
    "\ufff4\011\ufff4\012\011\013\ufff4\024\024\025\041\026\006" +
    "\027\004\030\032\031\023\032\022\033\016\035\015\036" +
    "\ufff4\037\ufff4\040\ufff4\041\037\042\010\043\020\054\026" +
    "\061\017\073\031\100\030\001\002\000\012\012\011\061" +
    "\017\073\031\100\030\001\002\000\106\011\236\012\011" +
    "\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\024" +
    "\024\025\041\026\006\027\004\030\032\031\023\032\022" +
    "\033\016\035\015\041\037\042\010\043\020\054\026\061" +
    "\017\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf" +
    "\072\uffbf\073\031\074\uffbf\076\uffbf\077\uffbf\100\030\001" +
    "\002\000\062\002\uffee\005\uffee\011\uffee\012\011\013\uffee" +
    "\024\024\025\041\026\006\027\004\030\032\031\023\032" +
    "\022\033\016\035\015\036\uffee\037\uffee\040\uffee\041\037" +
    "\042\010\043\020\054\026\061\017\073\031\100\030\001" +
    "\002\000\012\012\011\061\017\073\031\100\030\001\002" +
    "\000\020\002\uffea\005\uffea\011\uffea\013\uffea\036\uffea\037" +
    "\uffea\040\uffea\001\002\000\004\011\247\001\002\000\040" +
    "\014\054\015\064\016\057\017\055\020\050\021\066\064" +
    "\053\065\062\066\061\067\051\070\243\071\065\072\047" +
    "\076\052\077\060\001\002\000\012\012\011\061\017\073" +
    "\031\100\030\001\002\000\044\011\uffe8\014\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\021\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\074\245\076\uffbf" +
    "\077\uffbf\001\002\000\012\012\011\061\017\073\031\100" +
    "\030\001\002\000\004\011\uffe7\001\002\000\062\002\uffed" +
    "\005\uffed\011\uffed\012\011\013\uffed\024\024\025\041\026" +
    "\006\027\004\030\032\031\023\032\022\033\016\035\015" +
    "\036\uffed\037\uffed\040\uffed\041\037\042\010\043\020\054" +
    "\026\061\017\073\031\100\030\001\002\000\020\002\uffec" +
    "\005\uffec\011\uffec\013\uffec\036\uffec\037\uffec\040\uffec\001" +
    "\002\000\020\002\uffeb\005\uffeb\011\uffeb\013\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\001\002\000\020\002\ufff2\005\ufff2\011" +
    "\ufff2\013\ufff2\036\ufff2\037\ufff2\040\ufff2\001\002\000\004" +
    "\011\257\001\002\000\044\011\ufff0\014\054\015\064\016" +
    "\057\017\055\020\050\021\066\064\053\065\062\066\061" +
    "\067\051\070\063\071\065\072\047\074\255\076\052\077" +
    "\060\001\002\000\012\012\011\061\017\073\031\100\030" +
    "\001\002\000\004\011\uffef\001\002\000\062\002\ufff3\005" +
    "\ufff3\011\ufff3\012\011\013\ufff3\024\024\025\041\026\006" +
    "\027\004\030\032\031\023\032\022\033\016\035\015\036" +
    "\ufff3\037\ufff3\040\ufff3\041\037\042\010\043\020\054\026" +
    "\061\017\073\031\100\030\001\002\000\020\002\ufff1\005" +
    "\ufff1\011\ufff1\013\ufff1\036\ufff1\037\ufff1\040\ufff1\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\036\004\006\005\020\006\032\010\041\013" +
    "\034\014\013\015\026\016\024\017\012\021\033\022\011" +
    "\025\004\037\035\042\037\001\001\000\002\001\001\000" +
    "\004\022\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\216\001\001\000\004\022" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\005\043\006" +
    "\032\010\041\013\034\014\013\015\026\016\024\017\012" +
    "\021\033\022\011\025\004\037\035\042\037\001\001\000" +
    "\002\001\001\000\004\022\045\001\001\000\002\001\001" +
    "\000\004\022\112\001\001\000\004\022\111\001\001\000" +
    "\004\022\110\001\001\000\004\022\107\001\001\000\004" +
    "\022\106\001\001\000\004\022\105\001\001\000\004\022" +
    "\104\001\001\000\034\005\076\006\032\010\041\013\034" +
    "\014\013\015\026\016\024\017\012\021\033\022\011\025" +
    "\004\037\035\042\037\001\001\000\004\022\075\001\001" +
    "\000\004\022\074\001\001\000\004\022\073\001\001\000" +
    "\004\022\072\001\001\000\004\022\071\001\001\000\004" +
    "\022\070\001\001\000\004\022\067\001\001\000\004\022" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\101\006\032\010\041\013" +
    "\034\014\013\015\026\016\024\017\012\021\033\022\011" +
    "\025\004\037\035\042\037\001\001\000\002\001\001\000" +
    "\034\005\103\006\032\010\041\013\034\014\013\015\026" +
    "\016\024\017\012\021\033\022\011\025\004\037\035\042" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\005\123\006\032\010\041\013\034\014\013\015" +
    "\026\016\024\017\012\021\033\022\011\025\004\037\035" +
    "\042\037\001\001\000\002\001\001\000\034\005\125\006" +
    "\032\010\041\013\034\014\013\015\026\016\024\017\012" +
    "\021\033\022\011\025\004\037\035\042\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\134\006\032\010\041\013\034\014\013\015\026" +
    "\016\024\017\012\021\033\022\011\025\004\037\035\042" +
    "\037\001\001\000\002\001\001\000\004\022\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\005\141\006" +
    "\032\010\041\013\034\014\013\015\026\016\024\017\012" +
    "\021\033\022\011\025\004\037\035\042\037\001\001\000" +
    "\002\001\001\000\034\005\144\006\032\010\041\013\034" +
    "\014\013\015\026\016\024\017\012\021\033\022\011\025" +
    "\004\037\035\042\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\156\006\032\010\041\013\034\014" +
    "\013\015\026\016\024\017\012\021\033\022\011\025\004" +
    "\037\035\042\037\001\001\000\002\001\001\000\004\022" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\153\006\032\010\041\013\034\014\013\015\026\016" +
    "\024\017\012\021\033\022\011\025\004\037\035\042\037" +
    "\001\001\000\002\001\001\000\034\005\155\006\032\010" +
    "\041\013\034\014\013\015\026\016\024\017\012\021\033" +
    "\022\011\025\004\037\035\042\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\160\006\032\010\041" +
    "\013\034\014\013\015\026\016\024\017\012\021\033\022" +
    "\011\025\004\037\035\042\037\001\001\000\002\001\001" +
    "\000\004\022\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\167\033\166\001\001\000\002\001\001" +
    "\000\006\020\200\033\166\001\001\000\002\001\001\000" +
    "\004\022\171\001\001\000\002\001\001\000\034\005\173" +
    "\006\032\010\041\013\034\014\013\015\026\016\024\017" +
    "\012\021\033\022\011\025\004\037\035\042\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\177\006\032\010\041\013\034\014\013\015\026" +
    "\016\024\017\012\021\033\022\011\025\004\037\035\042" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\202\006\032\010\041\013\034\014\013\015\026\016" +
    "\024\017\012\021\033\022\011\025\004\037\035\042\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\212\001\001\000\034\005\207\006\032\010\041\013\034" +
    "\014\013\015\026\016\024\017\012\021\033\022\011\025" +
    "\004\037\035\042\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\211\006\032\010\041\013\034\014" +
    "\013\015\026\016\024\017\012\021\033\022\011\025\004" +
    "\037\035\042\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\214\006\032\010\041\013\034\014\013" +
    "\015\026\016\024\017\012\021\033\022\011\025\004\037" +
    "\035\042\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\224" +
    "\006\032\010\041\013\034\014\013\015\026\016\024\017" +
    "\012\021\033\022\011\025\004\037\035\042\037\001\001" +
    "\000\002\001\001\000\034\005\226\006\032\010\041\013" +
    "\034\014\013\015\026\016\024\017\012\021\033\022\011" +
    "\025\004\037\035\042\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\253\040\252" +
    "\001\001\000\034\005\251\006\032\010\041\013\034\014" +
    "\013\015\026\016\024\017\012\021\033\022\011\025\004" +
    "\037\035\042\037\001\001\000\004\022\234\001\001\000" +
    "\034\005\237\006\032\010\041\013\034\014\013\015\026" +
    "\016\024\017\012\021\033\022\011\025\004\037\035\042" +
    "\037\001\001\000\034\005\250\006\032\010\041\013\034" +
    "\014\013\015\026\016\024\017\012\021\033\022\011\025" +
    "\004\037\035\042\037\001\001\000\006\022\241\041\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\243\001\001\000\002\001\001\000\006" +
    "\022\241\041\245\001\001\000\002\001\001\000\034\005" +
    "\247\006\032\010\041\013\034\014\013\015\026\016\024" +
    "\017\012\021\033\022\011\025\004\037\035\042\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\253\040" +
    "\255\001\001\000\002\001\001\000\034\005\257\006\032" +
    "\010\041\013\034\014\013\015\026\016\024\017\012\021" +
    "\033\022\011\025\004\037\035\042\037\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inst EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inst ::= declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inst ::= 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaracion ::= declaracion_variable 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion ::= asignacion_variable_valores 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= asignacion_operacion_aritmetica 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= imprimir_pantalla 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= condicion_if 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= ciclo_while 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= contador 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= declaracion_switch 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= ciclo_for 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= ciclo_do_while 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_variable ::= tipo expresion PUNTO_Y_COMA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_variable ::= tipo expresion COMA continuidad_variables PUNTO_Y_COMA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_variable ::= tipo expresion PUNTO_Y_COMA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_variable ::= tipo expresion COMA continuidad_variables PUNTO_Y_COMA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // continuidad_variables ::= expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("continuidad_variables",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // continuidad_variables ::= expresion COMA continuidad_variables 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("continuidad_variables",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asignacion_variable_valores ::= tipo expresion ASIGNACION expresion PUNTO_Y_COMA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable_valores",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asignacion_variable_valores ::= tipo expresion ASIGNACION expresion COMA continuidad_asignacion PUNTO_Y_COMA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable_valores",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignacion_variable_valores ::= tipo expresion ASIGNACION expresion COMA continuidad_asignacion PUNTO_Y_COMA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable_valores",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion_variable_valores ::= tipo expresion ASIGNACION expresion PUNTO_Y_COMA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable_valores",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignacion_variable_valores ::= tipo expresion ASIGNACION expresion declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable_valores",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignacion_variable_valores ::= expresion ASIGNACION expresion PUNTO_Y_COMA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_variable_valores",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // continuidad_asignacion ::= expresion ASIGNACION expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("continuidad_asignacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // continuidad_asignacion ::= expresion ASIGNACION expresion COMA continuidad_asignacion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("continuidad_asignacion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignacion_operacion_aritmetica ::= expresion PUNTO_Y_COMA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_operacion_aritmetica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignacion_operacion_aritmetica ::= expresion expresion PUNTO_Y_COMA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_operacion_aritmetica",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // imprimir_pantalla ::= SYSTEM PUNTO OUT PUNTO PRINTLN PARENTESIS_ABRE expresion PARENTESIS_CIERRA PUNTO_Y_COMA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("imprimir_pantalla",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // imprimir_pantalla ::= SYSTEM PUNTO OUT PUNTO PRINTLN PARENTESIS_ABRE expresion PARENTESIS_CIERRA PUNTO_Y_COMA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("imprimir_pantalla",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion_if ::= IF PARENTESIS_ABRE expresion PARENTESIS_CIERRA LLAVES_ABRE declaracion LLAVES_CIERRA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion_if ::= IF PARENTESIS_ABRE expresion PARENTESIS_CIERRA LLAVES_ABRE declaracion LLAVES_CIERRA ELSE LLAVES_ABRE declaracion LLAVES_CIERRA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion_if ::= IF PARENTESIS_ABRE expresion PARENTESIS_CIERRA LLAVES_ABRE declaracion LLAVES_CIERRA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion_if ::= IF PARENTESIS_ABRE expresion PARENTESIS_CIERRA LLAVES_ABRE declaracion LLAVES_CIERRA ELSE LLAVES_ABRE declaracion LLAVES_CIERRA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion_if ::= IF PARENTESIS_ABRE expresion PARENTESIS_CIERRA LLAVES_ABRE declaracion LLAVES_CIERRA ELSE IF PARENTESIS_ABRE expresion PARENTESIS_CIERRA LLAVES_ABRE declaracion LLAVES_CIERRA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion_if ::= IF PARENTESIS_ABRE expresion PARENTESIS_CIERRA LLAVES_ABRE declaracion LLAVES_CIERRA ELSE IF PARENTESIS_ABRE expresion PARENTESIS_CIERRA LLAVES_ABRE declaracion LLAVES_CIERRA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ciclo_while ::= WHILE PARENTESIS_ABRE expresion PARENTESIS_CIERRA LLAVES_ABRE declaracion LLAVES_CIERRA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ciclo_while ::= WHILE PARENTESIS_ABRE expresion PARENTESIS_CIERRA LLAVES_ABRE declaracion LLAVES_CIERRA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_switch ::= SWITCH PARENTESIS_ABRE expresion PARENTESIS_CIERRA LLAVES_ABRE cases LLAVES_CIERRA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_switch",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion_switch ::= SWITCH PARENTESIS_ABRE expresion PARENTESIS_CIERRA LLAVES_ABRE cases LLAVES_CIERRA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_switch",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cases ::= casos 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cases ::= casos cases 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cases",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // casos ::= CASE expresion DOS_PUNTOS declaracion BREAK PUNTO_Y_COMA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // casos ::= DEFAULT DOS_PUNTOS declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ciclo_for ::= FOR PARENTESIS_ABRE declaracion PUNTO_Y_COMA expresion PUNTO_Y_COMA declaracion PARENTESIS_CIERRA LLAVES_ABRE declaracion LLAVES_CIERRA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ciclo_for ::= FOR PARENTESIS_ABRE declaracion PUNTO_Y_COMA expresion PUNTO_Y_COMA declaracion PARENTESIS_CIERRA LLAVES_ABRE declaracion LLAVES_CIERRA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ciclo_do_while ::= DO LLAVES_ABRE declaracion LLAVES_CIERRA WHILE PARENTESIS_ABRE expresion PARENTESIS_CIERRA PUNTO_Y_COMA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ciclo_do_while ::= DO LLAVES_ABRE declaracion LLAVES_CIERRA WHILE PARENTESIS_ABRE expresion PARENTESIS_CIERRA PUNTO_Y_COMA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_do_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipo ::= INT 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipo ::= DOUBLE 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipo ::= FLOAT 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo ::= LONG 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= SHORT 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= STRING 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo ::= BOOLEAN 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contador ::= expresion INCREMENTO 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contador",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contador ::= expresion INCREMENTO PUNTO_Y_COMA declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contador",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // contador ::= expresion INCREMENTO PUNTO_Y_COMA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contador",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // contador ::= expresion INCREMENTO declaracion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("contador",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= expresion SUMA expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= expresion RESTA expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= expresion MULTIPLICACION expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= expresion DIAGONAL_DER expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= expresion MENOR_QUE expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= expresion MAYOR_QUE expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= expresion ASIGNACION expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= expresion COMPARACION expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion DIFERENTE expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion IGUAL_O_MENOR_QUE expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion MENOR_O_IGUAL_QUE expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion IGUAL_O_MAYOR_QUE expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresion MAYOR_O_IGUAL_QUE expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= expresion AND expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresion OR expresion 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= IDENTIFICADOR 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= ID 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= NUMERO 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
