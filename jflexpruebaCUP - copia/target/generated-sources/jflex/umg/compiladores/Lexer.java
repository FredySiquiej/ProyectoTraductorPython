// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: src/main/jflex/pruebaProyecto.jflex

package umg.compiladores;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\2\0\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\0\1\30\1\31\1\30\1\32"+
    "\1\30\1\33\2\30\1\34\2\30\1\35\6\30\1\36"+
    "\7\30\1\37\1\40\1\41\3\0\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\30\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\30\1\61\1\62"+
    "\1\63\1\64\1\30\1\65\1\66\1\67\1\30\1\70"+
    "\1\71\1\72\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\2\0\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\1\1\26"+
    "\1\27\15\1\1\30\1\31\1\32\1\33\1\0\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\7\1"+
    "\1\44\3\1\1\45\23\1\1\46\1\47\2\1\1\50"+
    "\12\1\1\51\2\1\1\52\1\1\1\53\1\54\11\1"+
    "\1\55\2\1\1\56\7\1\1\57\1\1\1\60\1\1"+
    "\1\61\1\62\2\1\1\63\6\1\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\4\1\1\72\1\1\1\73\1\1"+
    "\1\74\2\1\1\75\2\1\1\76\1\1\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\73\0\73\0\73\0\166\0\261\0\73"+
    "\0\354\0\73\0\73\0\73\0\u0127\0\73\0\73\0\73"+
    "\0\73\0\u0162\0\73\0\73\0\u019d\0\u01d8\0\u0213\0\u024e"+
    "\0\u0289\0\73\0\73\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0"+
    "\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\u0588"+
    "\0\73\0\73\0\73\0\73\0\u05c3\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887"+
    "\0\u024e\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u024e\0\u024e\0\u0d23\0\u0d5e"+
    "\0\u024e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u024e\0\u0fe7\0\u1022\0\u024e\0\u105d"+
    "\0\u024e\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u024e\0\u12e6\0\u1321\0\u024e\0\u135c"+
    "\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u024e\0\u14f9"+
    "\0\u024e\0\u1534\0\u024e\0\u024e\0\u156f\0\u15aa\0\u024e\0\u15e5"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u024e\0\u024e"+
    "\0\u024e\0\u024e\0\u024e\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u024e"+
    "\0\u186e\0\u024e\0\u18a9\0\u024e\0\u18e4\0\u191f\0\u024e\0\u195a"+
    "\0\u1995\0\u024e\0\u19d0\0\u024e\0\u024e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\0\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\6\30\1\31\1\32\1\0\1\33\1\30\1\34\1\35"+
    "\1\36\1\37\1\40\2\30\1\41\1\30\1\42\1\30"+
    "\1\43\1\44\1\45\1\46\1\47\2\30\1\50\2\30"+
    "\1\51\1\4\1\52\121\0\1\53\44\0\7\7\1\54"+
    "\30\7\1\55\32\7\11\0\1\56\76\0\1\57\77\0"+
    "\1\22\76\0\1\60\71\0\1\61\1\62\1\63\71\0"+
    "\1\64\66\0\1\65\5\0\7\30\3\0\26\30\25\0"+
    "\1\65\5\0\7\30\3\0\2\30\1\66\16\30\1\67"+
    "\3\30\1\70\25\0\1\65\5\0\7\30\3\0\15\30"+
    "\1\71\1\30\1\72\6\30\25\0\1\65\5\0\7\30"+
    "\3\0\1\73\25\30\25\0\1\65\5\0\7\30\3\0"+
    "\4\30\1\74\10\30\1\75\10\30\25\0\1\65\5\0"+
    "\7\30\3\0\12\30\1\76\13\30\25\0\1\65\5\0"+
    "\7\30\3\0\12\30\1\77\2\30\1\100\10\30\25\0"+
    "\1\65\5\0\7\30\3\0\5\30\1\101\6\30\1\102"+
    "\11\30\25\0\1\65\5\0\7\30\3\0\15\30\1\103"+
    "\10\30\25\0\1\65\5\0\7\30\3\0\4\30\1\104"+
    "\21\30\25\0\1\65\5\0\7\30\3\0\22\30\1\105"+
    "\3\30\25\0\1\65\5\0\7\30\3\0\17\30\1\106"+
    "\6\30\25\0\1\65\5\0\7\30\3\0\4\30\1\107"+
    "\21\30\25\0\1\65\5\0\7\30\3\0\7\30\1\110"+
    "\13\30\1\111\2\30\25\0\1\65\5\0\7\30\3\0"+
    "\7\30\1\112\16\30\3\0\2\7\3\0\66\7\22\0"+
    "\1\65\5\0\7\65\3\0\26\65\25\0\1\65\5\0"+
    "\7\30\3\0\1\113\25\30\25\0\1\65\5\0\7\30"+
    "\3\0\17\30\1\114\6\30\25\0\1\65\5\0\7\30"+
    "\3\0\20\30\1\115\5\30\25\0\1\65\5\0\7\30"+
    "\3\0\15\30\1\116\10\30\25\0\1\65\5\0\7\30"+
    "\3\0\4\30\1\117\21\30\25\0\1\65\5\0\7\30"+
    "\3\0\20\30\1\120\5\30\25\0\1\65\5\0\7\30"+
    "\3\0\5\30\1\121\20\30\25\0\1\65\5\0\7\30"+
    "\3\0\22\30\1\122\3\30\25\0\1\65\5\0\7\30"+
    "\3\0\20\30\1\123\5\30\25\0\1\65\5\0\7\30"+
    "\3\0\15\30\1\124\10\30\25\0\1\65\5\0\7\30"+
    "\3\0\17\30\1\125\6\30\25\0\1\65\5\0\7\30"+
    "\3\0\21\30\1\126\4\30\25\0\1\65\5\0\7\30"+
    "\3\0\14\30\1\127\11\30\25\0\1\65\5\0\7\30"+
    "\3\0\24\30\1\130\1\30\25\0\1\65\5\0\7\30"+
    "\3\0\21\30\1\131\4\30\25\0\1\65\5\0\7\30"+
    "\3\0\10\30\1\132\15\30\25\0\1\65\5\0\7\30"+
    "\3\0\21\30\1\133\4\30\25\0\1\65\5\0\7\30"+
    "\3\0\15\30\1\134\10\30\25\0\1\65\5\0\7\30"+
    "\3\0\10\30\1\135\15\30\25\0\1\65\5\0\7\30"+
    "\3\0\10\30\1\136\15\30\25\0\1\65\5\0\7\30"+
    "\3\0\14\30\1\137\11\30\25\0\1\65\5\0\7\30"+
    "\3\0\10\30\1\140\15\30\25\0\1\65\5\0\7\30"+
    "\3\0\21\30\1\141\4\30\25\0\1\65\5\0\7\30"+
    "\3\0\12\30\1\142\13\30\25\0\1\65\5\0\7\30"+
    "\3\0\1\143\25\30\25\0\1\65\5\0\7\30\3\0"+
    "\4\30\1\144\21\30\25\0\1\65\5\0\7\30\3\0"+
    "\1\145\25\30\25\0\1\65\5\0\7\30\3\0\1\30"+
    "\1\146\24\30\25\0\1\65\5\0\7\30\3\0\4\30"+
    "\1\147\21\30\25\0\1\65\5\0\7\30\3\0\1\150"+
    "\25\30\25\0\1\65\5\0\7\30\3\0\6\30\1\151"+
    "\17\30\25\0\1\65\5\0\7\30\3\0\21\30\1\152"+
    "\4\30\25\0\1\65\5\0\7\30\3\0\14\30\1\153"+
    "\11\30\25\0\1\65\5\0\7\30\3\0\22\30\1\154"+
    "\3\30\25\0\1\65\5\0\7\30\3\0\17\30\1\155"+
    "\6\30\25\0\1\65\5\0\7\30\3\0\21\30\1\156"+
    "\4\30\25\0\1\65\5\0\7\30\3\0\12\30\1\157"+
    "\13\30\25\0\1\65\5\0\7\30\3\0\14\30\1\160"+
    "\11\30\25\0\1\65\5\0\7\30\3\0\14\30\1\161"+
    "\11\30\25\0\1\65\5\0\7\30\3\0\4\30\1\162"+
    "\21\30\25\0\1\65\5\0\7\30\3\0\4\30\1\163"+
    "\21\30\25\0\1\65\5\0\7\30\3\0\11\30\1\164"+
    "\14\30\25\0\1\65\5\0\7\30\3\0\22\30\1\165"+
    "\3\30\25\0\1\65\5\0\7\30\3\0\12\30\1\166"+
    "\13\30\25\0\1\65\5\0\7\30\3\0\21\30\1\167"+
    "\4\30\25\0\1\65\5\0\1\30\1\170\1\171\1\172"+
    "\1\173\1\174\1\30\3\0\26\30\25\0\1\65\5\0"+
    "\7\30\3\0\21\30\1\175\4\30\25\0\1\65\5\0"+
    "\7\30\3\0\17\30\1\176\6\30\25\0\1\65\5\0"+
    "\7\30\3\0\21\30\1\177\4\30\25\0\1\65\5\0"+
    "\7\30\3\0\2\30\1\200\23\30\25\0\1\65\5\0"+
    "\7\30\3\0\4\30\1\201\21\30\25\0\1\65\5\0"+
    "\7\30\3\0\4\30\1\202\21\30\25\0\1\65\5\0"+
    "\7\30\3\0\6\30\1\203\17\30\25\0\1\65\5\0"+
    "\7\30\3\0\13\30\1\204\12\30\25\0\1\65\5\0"+
    "\7\30\3\0\1\205\25\30\25\0\1\65\5\0\7\30"+
    "\3\0\12\30\1\206\13\30\25\0\1\65\5\0\7\30"+
    "\3\0\4\30\1\207\21\30\25\0\1\65\5\0\7\30"+
    "\3\0\15\30\1\210\7\30\1\211\25\0\1\65\5\0"+
    "\7\30\3\0\15\30\1\212\10\30\25\0\1\65\5\0"+
    "\7\30\3\0\12\30\1\213\13\30\25\0\1\65\5\0"+
    "\7\30\3\0\14\30\1\214\11\30\25\0\1\65\5\0"+
    "\7\30\3\0\10\30\1\215\15\30\25\0\1\65\5\0"+
    "\7\30\3\0\12\30\1\216\13\30\25\0\1\65\5\0"+
    "\7\30\3\0\14\30\1\217\11\30\25\0\1\65\5\0"+
    "\7\30\3\0\7\30\1\220\16\30\25\0\1\65\5\0"+
    "\7\30\3\0\17\30\1\221\6\30\25\0\1\65\5\0"+
    "\7\30\3\0\14\30\1\222\11\30\25\0\1\65\5\0"+
    "\7\30\3\0\21\30\1\223\4\30\25\0\1\65\5\0"+
    "\7\30\3\0\15\30\1\224\10\30\25\0\1\65\5\0"+
    "\7\30\3\0\21\30\1\225\4\30\25\0\1\65\5\0"+
    "\7\30\3\0\22\30\1\226\3\30\25\0\1\65\5\0"+
    "\7\30\3\0\15\30\1\227\10\30\25\0\1\65\5\0"+
    "\7\30\3\0\21\30\1\230\4\30\25\0\1\65\5\0"+
    "\7\30\3\0\14\30\1\231\11\30\25\0\1\65\5\0"+
    "\7\30\3\0\14\30\1\232\11\30\25\0\1\65\5\0"+
    "\7\30\3\0\12\30\1\233\13\30\25\0\1\65\5\0"+
    "\7\30\3\0\4\30\1\234\21\30\25\0\1\65\5\0"+
    "\7\30\3\0\1\30\1\235\24\30\25\0\1\65\5\0"+
    "\7\30\3\0\1\236\25\30\25\0\1\65\5\0\7\30"+
    "\3\0\4\30\1\237\21\30\25\0\1\65\5\0\7\30"+
    "\3\0\4\30\1\240\21\30\25\0\1\65\5\0\7\30"+
    "\3\0\12\30\1\241\13\30\25\0\1\65\5\0\7\30"+
    "\3\0\21\30\1\242\4\30\25\0\1\65\5\0\7\30"+
    "\3\0\1\243\25\30\25\0\1\65\5\0\7\30\3\0"+
    "\4\30\1\244\21\30\25\0\1\65\5\0\7\30\3\0"+
    "\14\30\1\245\11\30\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6667];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\4\11\2\0\1\11\1\1\3\11\1\1\4\11"+
    "\1\1\2\11\5\1\2\11\15\1\4\11\1\0\7\11"+
    "\161\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int tipo, Object valor){ 
    return new Symbol(tipo, yyline, yycolumn,valor);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Lexema:  " + yytext()+ "       columna:  " + yychar + "     fila:  " + yyline     );return symbol(sym.IDENTIFICADOR, yytext());
            }
          // fall through
          case 65: break;
          case 2:
            { /* Ignorar tabulaciones */
            }
          // fall through
          case 66: break;
          case 3:
            { /* Ignorar saltos de línea */
            }
          // fall through
          case 67: break;
          case 4:
            { System.out.println("Lexema:  " + yytext() );
            }
          // fall through
          case 68: break;
          case 5:
            { /* Ignorar espacios en blanco */
            }
          // fall through
          case 69: break;
          case 6:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.PORCIENTO, yytext());
            }
          // fall through
          case 70: break;
          case 7:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.AND, yytext());
            }
          // fall through
          case 71: break;
          case 8:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.PARENTESIS_ABRE, yytext());
            }
          // fall through
          case 72: break;
          case 9:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.PARENTESIS_CIERRA, yytext());
            }
          // fall through
          case 73: break;
          case 10:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.MULTIPLICACION, yytext());
            }
          // fall through
          case 74: break;
          case 11:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.SUMA, yytext());
            }
          // fall through
          case 75: break;
          case 12:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.COMA, yytext());
            }
          // fall through
          case 76: break;
          case 13:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.RESTA, yytext());
            }
          // fall through
          case 77: break;
          case 14:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.PUNTO, yytext());
            }
          // fall through
          case 78: break;
          case 15:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.DIAGONAL_DER, yytext());
            }
          // fall through
          case 79: break;
          case 16:
            { System.out.println("Lexema:  " + yytext()+ "       columna:  " + yychar + "     fila:  " + yyline     );return symbol(sym.NUMERO, yytext());
            }
          // fall through
          case 80: break;
          case 17:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.DOS_PUNTOS, yytext());
            }
          // fall through
          case 81: break;
          case 18:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.PUNTO_Y_COMA, yytext());
            }
          // fall through
          case 82: break;
          case 19:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.MENOR_QUE, yytext());
            }
          // fall through
          case 83: break;
          case 20:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.ASIGNACION, yytext());
            }
          // fall through
          case 84: break;
          case 21:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.MAYOR_QUE, yytext());
            }
          // fall through
          case 85: break;
          case 22:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.CORCHETES_ABRE, yytext());
            }
          // fall through
          case 86: break;
          case 23:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.CORCHETES_CIERRA, yytext());
            }
          // fall through
          case 87: break;
          case 24:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.LLAVES_ABRE, yytext());
            }
          // fall through
          case 88: break;
          case 25:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.LLAVES_CIERRA, yytext());
            }
          // fall through
          case 89: break;
          case 26:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.DIFERENTE, yytext());
            }
          // fall through
          case 90: break;
          case 27:
            { System.out.println("Lexema:  " + yytext()   + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.ID, yytext());
            }
          // fall through
          case 91: break;
          case 28:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.YY, yytext());
            }
          // fall through
          case 92: break;
          case 29:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.INCREMENTO, yytext());
            }
          // fall through
          case 93: break;
          case 30:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.MENOR_O_IGUAL_QUE, yytext());
            }
          // fall through
          case 94: break;
          case 31:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.IGUAL_O_MENOR_QUE, yytext());
            }
          // fall through
          case 95: break;
          case 32:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.COMPARACION, yytext());
            }
          // fall through
          case 96: break;
          case 33:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.IGUAL_O_MAYOR_QUE, yytext());
            }
          // fall through
          case 97: break;
          case 34:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.MAYOR_O_IGUAL_QUE, yytext());
            }
          // fall through
          case 98: break;
          case 35:
            { System.out.println("Lexema:  " + "ID   "   + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.COMBINACIONID, yytext());
            }
          // fall through
          case 99: break;
          case 36:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.DO, yytext());
            }
          // fall through
          case 100: break;
          case 37:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.IF, yytext());
            }
          // fall through
          case 101: break;
          case 38:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.FOR, yytext());
            }
          // fall through
          case 102: break;
          case 39:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.INT, yytext());
            }
          // fall through
          case 103: break;
          case 40:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.OUT, yytext());
            }
          // fall through
          case 104: break;
          case 41:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.CASE, yytext());
            }
          // fall through
          case 105: break;
          case 42:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.ELSE, yytext());
            }
          // fall through
          case 106: break;
          case 43:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.LONG, yytext());
            }
          // fall through
          case 107: break;
          case 44:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.NEXT, yytext());
            }
          // fall through
          case 108: break;
          case 45:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.BREAK, yytext());
            }
          // fall through
          case 109: break;
          case 46:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.FLOAT, yytext());
            }
          // fall through
          case 110: break;
          case 47:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.SHORT, yytext());
            }
          // fall through
          case 111: break;
          case 48:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.WHILE, yytext());
            }
          // fall through
          case 112: break;
          case 49:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.STRING, yytext());
            }
          // fall through
          case 113: break;
          case 50:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.SYSTEM, yytext());
            }
          // fall through
          case 114: break;
          case 51:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.DOUBLE, yytext());
            }
          // fall through
          case 115: break;
          case 52:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.PRINTL, yytext());
            }
          // fall through
          case 116: break;
          case 53:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.RETURN, yytext());
            }
          // fall through
          case 117: break;
          case 54:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.SWITCH, yytext());
            }
          // fall through
          case 118: break;
          case 55:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.SCANNER, yytext());
            }
          // fall through
          case 119: break;
          case 56:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.BOOLEAN, yytext());
            }
          // fall through
          case 120: break;
          case 57:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.DEFAULT, yytext());
            }
          // fall through
          case 121: break;
          case 58:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.NEXTINT, yytext());
            }
          // fall through
          case 122: break;
          case 59:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.PRINTLN, yytext());
            }
          // fall through
          case 123: break;
          case 60:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.NEXTBYTE, yytext());
            }
          // fall through
          case 124: break;
          case 61:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.NEXTLINE, yytext());
            }
          // fall through
          case 125: break;
          case 62:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.NEXTFLOAT, yytext());
            }
          // fall through
          case 126: break;
          case 63:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.NEXTDOUBLE, yytext());
            }
          // fall through
          case 127: break;
          case 64:
            { System.out.println("Lexema:  " + yytext()  + "       columna:  " + yychar + "     fila:  " + yyline  );return symbol(sym.NEXTBOOLEAN, yytext());
            }
          // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
